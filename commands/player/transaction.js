// commands/player/transaction.js

const Transaction = require('../../models/Transaction');

module.exports = function (bot) {
  bot.onText(/\/transaction/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    const lang = msg.from.language_code || 'en';

    try {
      const transactions = await Transaction.find({ playerId: telegramId })
        .sort({ createdAt: -1 })
        .limit(10);

      if (!transactions.length) {
        const noTx = lang.startsWith('am')
          ? 'üö´ ·àù·äï·àù ·äï·â•·à®·âµ ·â≥·à™·ä≠ ·ä†·àç·â∞·åà·äò·àù·ç¢'
          : 'üö´ No transaction history found.';
        return bot.sendMessage(chatId, noTx);
      }

      let message = lang.startsWith('am')
        ? 'üìÑ ·ã®·äï·â•·à®·âµ ·â≥·à™·ä≠·ç¶\n\n'
        : 'üìÑ Transaction History:\n\n';

      transactions.forEach(tx => {
        const type = tx.type === 'deposit'
          ? (lang.startsWith('am') ? '·ä†·ä®·àç' : 'Deposit')
          : (lang.startsWith('am') ? '·àò·ãç·å£·âµ' : 'Withdraw');
        const status = tx.approved
          ? (lang.startsWith('am') ? '‚úî ·â∞·çà·âÄ·ã∞' : '‚úî Approved')
          : (lang.startsWith('am') ? '‚è≥ ·â†·àò·å†·â£·â†·âÖ ·àã·ã≠' : '‚è≥ Pending');
        message += `‚Ä¢ ${type}: ${tx.amount ?? 0} birr ‚Äî ${status}\n`;
      });

      await bot.sendMessage(chatId, message);
    } catch (err) {
      console.error('‚ùå Error in /transaction:', err);
      await bot.sendMessage(chatId, '‚ö†Ô∏è Something went wrong while fetching your transactions.');
    }
  });
};
